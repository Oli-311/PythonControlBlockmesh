/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   0.001;



vertices
(
    (0 0 0) //0
    (1 0 0) //1
    (2 0 0) //2
    (3 0 0) //3
    (0 0.25 0) //4
    (1 0.25 0) //5
    (2 0.25 0) //6
    (3 0.25 0) //7
    (0 1.25 0) //8
    (1 1.25 0) //9
    (2 1.25 0) //10
    (3 1.25 0) //11

    (0 0 1) //12
    (1 0 1) //13
    (2 0 1) //14
    (3 0 1) //15
    (0 0.25 1) //16
    (1 0.25 1) //17
    (2 0.25 1) //18
    (3 0.25 1) //19
    (0 1.25 1) //20
    (1 1.25 1) //21
    (2 1.25 1) //22
    (3 1.25 1) //23

);

blocks
(
    hex (0 1 5 4 12 13 17 16) (100 25 1) simpleGrading (1 1 1)
    hex (1 2 6 5 13 14 18 17) (100 25 1) simpleGrading (1 1 1)
    hex (2 3 7 6 14 15 19 18) (100 25 1) simpleGrading (1 1 1)
    hex (4 5 9 8 16 17 21 20) (100 100 1) simpleGrading (1 1 1)
    hex (6 7 11 10 18 19 23 22) (100 100 1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    topAndBottom
    {
        type wall;
        faces
        (
            (0 12 16 4)
            (0 1 13 12)
            (1 2 14 13)
            (2 3 15 14)
            (3 15 19 7)
            (10 11 23 22)
            (6 18 22 10)
            (5 6 18 17)
            (5 17 21 9)
            (8 9 21 20)
        );
    }

    inlet
    {
        type patch;
        faces
        (
            (4 16 20 8)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (7 19 23 11)
        );
    }


    front
    {
        type empty;
        faces
        (
            (4 5 9 8)
            (0 1 5 4)
            (1 2 6 5)
            (2 3 7 6)
            (6 7 11 10)
        );
    }
    back
    {
        type empty;
        faces
        (
            (16 17 21 20)
            (12 13 17 16)
            (13 14 18 17)
            (14 15 19 18)
            (18 19 23 22)
        );
    }
    symmetry
    {
        type symmetry;
        faces
        (
        );
    }
);


// ************************************************************************* //
